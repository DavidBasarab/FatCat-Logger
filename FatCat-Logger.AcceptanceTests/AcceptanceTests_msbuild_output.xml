<?xml version="1.0" encoding="utf-8"?>
<results name=" NBehave.Narrator.Framework" version=" Version=0.5.0.252" date="6/4/2011" time="10:38 PM" themes="1" stories="2" scenarios="10" scenariosFailed="0" scenariosPending="0">
  <theme name="" time="0.159" stories="2" scenarios="10" scenariosFailed="0" scenariosPending="0">
    <stories>
      <story name="" time="0.03" scenarios="1" scenariosFailed="0" scenariosPending="0">
        <narrative>
</narrative>
        <scenarios>
          <scenario name="Hook Up A Generic Feature" time="0.029" outcome="passed">
            <actionStep name="&#x9;Given I want to test my hook up" outcome="passed" />
            <actionStep name="&#x9;When hook up my tests" outcome="passed" />
            <actionStep name="&#x9;Then my hook up should pass" outcome="passed" />
          </scenario>
        </scenarios>
      </story>
      <story name="" time="0.145" scenarios="9" scenariosFailed="0" scenariosPending="0">
        <narrative>
</narrative>
        <scenarios>
          <scenario name="Logging Interface will expose a Log.Message" time="0.01" outcome="passed">
            <actionStep name="    Given I want to log a message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log a message" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.Message with a string for a message" time="0.002" outcome="passed">
            <actionStep name="    Given I want to log a message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log a message taking a string" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.Message with a arguments" time="0.007" outcome="passed">
            <actionStep name="    Given I want to log a message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log a message taking a arguments" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.Message with a LogLevel" time="0.014" outcome="passed">
            <actionStep name="    Given I want to log a message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log a message taking a LogLevel " outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.Exception for logging exceptions" time="0.003" outcome="passed">
            <actionStep name="    Given I want to log an exception" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log an exception" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.Exception for logging exceptions and accept an exception" time="0.013" outcome="passed">
            <actionStep name="    Given I want to log an exception" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log an exception and accepts an exception" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.EventViewer for logging messages to the event viewer" time="0.001" outcome="passed">
            <actionStep name="    Given I want to log an event viewer message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log to the event viewer" outcome="passed" />
          </scenario>
          <scenario name="Logging Interface will expose a Log.EventViewer accepting a event viewer id, message, and arguments" time="0.06" outcome="passed">
            <actionStep name="    Given I want to log an event viewer message" outcome="passed" />
            <actionStep name="    When I load the FatCat-Logger .dll" outcome="passed" />
            <actionStep name="    Then I should have a method to log to the event viewer accepting [argument] with type [type]" outcome="passed" />
            <examples>
              <columnNames>
                <columnName>argument</columnName>
                <columnName>type</columnName>
              </columnNames>
              <example outcome="passed">
                <column columnName="argument">eventViewerId</column>
                <column columnName="type">System.Int32</column>
              </example>
              <example outcome="passed">
                <column columnName="argument">message</column>
                <column columnName="type">System.String</column>
              </example>
              <example outcome="passed">
                <column columnName="argument">args</column>
                <column columnName="type">System.Object[]</column>
              </example>
              <example outcome="passed">
                <column columnName="argument">level</column>
                <column columnName="type">FatCat.Logger.Interface.LogLevel</column>
              </example>
            </examples>
          </scenario>
          <scenario name="Logging Interface has a Log Level Enumeration" time="0" outcome="passed">
            <actionStep name="    Given I have an enumeration named LogLevel" outcome="passed" />
            <actionStep name="    When I select [value]" outcome="passed" />
            <actionStep name="    Then the name is [name]" outcome="passed" />
            <examples>
              <columnNames>
                <columnName>name</columnName>
                <columnName>value</columnName>
              </columnNames>
              <example outcome="passed">
                <column columnName="name">Exceptions</column>
                <column columnName="value">0</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Errors</column>
                <column columnName="value">1</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Warnings</column>
                <column columnName="value">2</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Low</column>
                <column columnName="value">3</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Medium</column>
                <column columnName="value">4</column>
              </example>
              <example outcome="passed">
                <column columnName="name">High</column>
                <column columnName="value">5</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Full</column>
                <column columnName="value">6</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Super</column>
                <column columnName="value">7</column>
              </example>
              <example outcome="passed">
                <column columnName="name">Debug</column>
                <column columnName="value">8</column>
              </example>
            </examples>
          </scenario>
        </scenarios>
      </story>
    </stories>
  </theme>
</results>